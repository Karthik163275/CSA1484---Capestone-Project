import re

def tokenize(code):
    tokens = re.findall(r"\s*(=>|[()\-+*/=;]|[A-Za-z_]\w*|\d+)", code)
    return tokens

class Parser:
    def __init__(self, tokens):
        self.tokens = tokens
        self.pos = 0

    def parse(self):
        return self.parse_expression()

    def parse_expression(self):
        if self.tokens[self.pos] == '(':
            return self.parse_function()
        elif re.match(r'\d+', self.tokens[self.pos]):
            return self.parse_number()
        elif re.match(r'[A-Za-z_]\w*', self.tokens[self.pos]):
            return self.parse_variable()
        else:
            raise SyntaxError("Unknown expression")

    def parse_number(self):
        value = int(self.tokens[self.pos])
        self.pos += 1
        return ('number', value)

    def parse_variable(self):
        name = self.tokens[self.pos]
        self.pos += 1
        return ('variable', name)

    def parse_function(self):
        self.pos += 1  # Skip '('
        params = []
        while self.tokens[self.pos] != ')':
            params.append(self.tokens[self.pos])
            self.pos += 1
        self.pos += 1  # Skip ')'
        self.pos += 1  # Skip '=>'
        body = self.parse_expression()
        return ('function', params, body)

class Evaluator:
    def __init__(self, ast):
        self.ast = ast
        self.env = {}

    def evaluate(self, node=None):
        if node is None:
            node = self.ast
        if node[0] == 'number':
            return node[1]
        elif node[0] == 'variable':
            return self.env[node[1]]
        elif node[0] == 'function':
            def func(*args):
                local_env = self.env.copy()
                for param, arg in zip(node[1], args):
                    local_env[param] = arg
                return Evaluator(node[2]).evaluate()
            self.env[node[1][0]] = func
            return func

code = "sum = (a, b) => a + b; result = sum(3, 4)"
tokens = tokenize(code)
parser = Parser(tokens)
ast = parser.parse()
evaluator = Evaluator(ast)
result = evaluator.evaluate()
print(result(3, 4))  # Output should be 7


sample input:
sum = (a, b) => a + b; result = sum(3, 4)
sample output:
7
